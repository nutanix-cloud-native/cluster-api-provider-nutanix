// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/facade (interfaces: FacadeClientV4)
//
// Generated by this command:
//
//	mockgen -destination=mocks/nutanixv4/v4facade.go -package=mocknutanixv4 github.com/nutanix-cloud-native/prism-go-client/facade FacadeClientV4
//

// Package mocknutanixv4 is a generated GoMock package.
package mocknutanixv4

import (
	reflect "reflect"

	facade "github.com/nutanix-cloud-native/prism-go-client/facade"
	config "github.com/nutanix/ntnx-api-golang-clients/clustermgmt-go-client/v4/models/clustermgmt/v4/config"
	config0 "github.com/nutanix/ntnx-api-golang-clients/networking-go-client/v4/models/networking/v4/config"
	config1 "github.com/nutanix/ntnx-api-golang-clients/prism-go-client/v4/models/prism/v4/config"
	config2 "github.com/nutanix/ntnx-api-golang-clients/vmm-go-client/v4/models/vmm/v4/ahv/config"
	policies "github.com/nutanix/ntnx-api-golang-clients/vmm-go-client/v4/models/vmm/v4/ahv/policies"
	content "github.com/nutanix/ntnx-api-golang-clients/vmm-go-client/v4/models/vmm/v4/content"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeClientV4 is a mock of FacadeClientV4 interface.
type MockFacadeClientV4 struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientV4MockRecorder
	isgomock struct{}
}

// MockFacadeClientV4MockRecorder is the mock recorder for MockFacadeClientV4.
type MockFacadeClientV4MockRecorder struct {
	mock *MockFacadeClientV4
}

// NewMockFacadeClientV4 creates a new mock instance.
func NewMockFacadeClientV4(ctrl *gomock.Controller) *MockFacadeClientV4 {
	mock := &MockFacadeClientV4{ctrl: ctrl}
	mock.recorder = &MockFacadeClientV4MockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClientV4) EXPECT() *MockFacadeClientV4MockRecorder {
	return m.recorder
}

// CreateAntiAffinityPolicy mocks base method.
func (m *MockFacadeClientV4) CreateAntiAffinityPolicy(policy policies.VmAntiAffinityPolicy) (facade.TaskWaiter[policies.VmAntiAffinityPolicy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAntiAffinityPolicy", policy)
	ret0, _ := ret[0].(facade.TaskWaiter[policies.VmAntiAffinityPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAntiAffinityPolicy indicates an expected call of CreateAntiAffinityPolicy.
func (mr *MockFacadeClientV4MockRecorder) CreateAntiAffinityPolicy(policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAntiAffinityPolicy", reflect.TypeOf((*MockFacadeClientV4)(nil).CreateAntiAffinityPolicy), policy)
}

// CreateCategory mocks base method.
func (m *MockFacadeClientV4) CreateCategory(category *config1.Category) (*config1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(*config1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockFacadeClientV4MockRecorder) CreateCategory(category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockFacadeClientV4)(nil).CreateCategory), category)
}

// CreateVM mocks base method.
func (m *MockFacadeClientV4) CreateVM(vm *config2.Vm) (facade.TaskWaiter[config2.Vm], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVM", vm)
	ret0, _ := ret[0].(facade.TaskWaiter[config2.Vm])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVM indicates an expected call of CreateVM.
func (mr *MockFacadeClientV4MockRecorder) CreateVM(vm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVM", reflect.TypeOf((*MockFacadeClientV4)(nil).CreateVM), vm)
}

// DeleteAntiAffinityPolicy mocks base method.
func (m *MockFacadeClientV4) DeleteAntiAffinityPolicy(uuid string) (facade.TaskWaiter[facade.NoEntity], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAntiAffinityPolicy", uuid)
	ret0, _ := ret[0].(facade.TaskWaiter[facade.NoEntity])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAntiAffinityPolicy indicates an expected call of DeleteAntiAffinityPolicy.
func (mr *MockFacadeClientV4MockRecorder) DeleteAntiAffinityPolicy(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAntiAffinityPolicy", reflect.TypeOf((*MockFacadeClientV4)(nil).DeleteAntiAffinityPolicy), uuid)
}

// DeleteCategory mocks base method.
func (m *MockFacadeClientV4) DeleteCategory(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockFacadeClientV4MockRecorder) DeleteCategory(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockFacadeClientV4)(nil).DeleteCategory), uuid)
}

// DeleteVM mocks base method.
func (m *MockFacadeClientV4) DeleteVM(uuid string) (facade.TaskWaiter[facade.NoEntity], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVM", uuid)
	ret0, _ := ret[0].(facade.TaskWaiter[facade.NoEntity])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVM indicates an expected call of DeleteVM.
func (mr *MockFacadeClientV4MockRecorder) DeleteVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVM", reflect.TypeOf((*MockFacadeClientV4)(nil).DeleteVM), uuid)
}

// GetAntiAffinityPolicy mocks base method.
func (m *MockFacadeClientV4) GetAntiAffinityPolicy(uuid string) (*policies.VmAntiAffinityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAntiAffinityPolicy", uuid)
	ret0, _ := ret[0].(*policies.VmAntiAffinityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAntiAffinityPolicy indicates an expected call of GetAntiAffinityPolicy.
func (mr *MockFacadeClientV4MockRecorder) GetAntiAffinityPolicy(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAntiAffinityPolicy", reflect.TypeOf((*MockFacadeClientV4)(nil).GetAntiAffinityPolicy), uuid)
}

// GetCategory mocks base method.
func (m *MockFacadeClientV4) GetCategory(uuid string) (*config1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", uuid)
	ret0, _ := ret[0].(*config1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockFacadeClientV4MockRecorder) GetCategory(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockFacadeClientV4)(nil).GetCategory), uuid)
}

// GetCluster mocks base method.
func (m *MockFacadeClientV4) GetCluster(uuid string) (*config.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", uuid)
	ret0, _ := ret[0].(*config.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockFacadeClientV4MockRecorder) GetCluster(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockFacadeClientV4)(nil).GetCluster), uuid)
}

// GetImage mocks base method.
func (m *MockFacadeClientV4) GetImage(uuid string) (*content.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", uuid)
	ret0, _ := ret[0].(*content.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockFacadeClientV4MockRecorder) GetImage(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockFacadeClientV4)(nil).GetImage), uuid)
}

// GetListIteratorAntiAffinityPolicies mocks base method.
func (m *MockFacadeClientV4) GetListIteratorAntiAffinityPolicies(opts ...facade.ODataOption) (facade.ODataListIterator[policies.VmAntiAffinityPolicy], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorAntiAffinityPolicies", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[policies.VmAntiAffinityPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorAntiAffinityPolicies indicates an expected call of GetListIteratorAntiAffinityPolicies.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorAntiAffinityPolicies(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorAntiAffinityPolicies", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorAntiAffinityPolicies), opts...)
}

// GetListIteratorCategories mocks base method.
func (m *MockFacadeClientV4) GetListIteratorCategories(opts ...facade.ODataOption) (facade.ODataListIterator[config1.Category], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorCategories", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[config1.Category])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorCategories indicates an expected call of GetListIteratorCategories.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorCategories(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorCategories", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorCategories), opts...)
}

// GetListIteratorClusters mocks base method.
func (m *MockFacadeClientV4) GetListIteratorClusters(opts ...facade.ODataOption) (facade.ODataListIterator[config.Cluster], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorClusters", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[config.Cluster])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorClusters indicates an expected call of GetListIteratorClusters.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorClusters(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorClusters", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorClusters), opts...)
}

// GetListIteratorImages mocks base method.
func (m *MockFacadeClientV4) GetListIteratorImages(opts ...facade.ODataOption) (facade.ODataListIterator[content.Image], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorImages", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[content.Image])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorImages indicates an expected call of GetListIteratorImages.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorImages(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorImages", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorImages), opts...)
}

// GetListIteratorStorageContainers mocks base method.
func (m *MockFacadeClientV4) GetListIteratorStorageContainers(opts ...facade.ODataOption) (facade.ODataListIterator[config.StorageContainer], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorStorageContainers", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[config.StorageContainer])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorStorageContainers indicates an expected call of GetListIteratorStorageContainers.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorStorageContainers(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorStorageContainers", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorStorageContainers), opts...)
}

// GetListIteratorSubnets mocks base method.
func (m *MockFacadeClientV4) GetListIteratorSubnets(opts ...facade.ODataOption) (facade.ODataListIterator[config0.Subnet], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorSubnets", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[config0.Subnet])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorSubnets indicates an expected call of GetListIteratorSubnets.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorSubnets(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorSubnets", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorSubnets), opts...)
}

// GetListIteratorVMs mocks base method.
func (m *MockFacadeClientV4) GetListIteratorVMs(opts ...facade.ODataOption) (facade.ODataListIterator[config2.Vm], error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetListIteratorVMs", varargs...)
	ret0, _ := ret[0].(facade.ODataListIterator[config2.Vm])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListIteratorVMs indicates an expected call of GetListIteratorVMs.
func (mr *MockFacadeClientV4MockRecorder) GetListIteratorVMs(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListIteratorVMs", reflect.TypeOf((*MockFacadeClientV4)(nil).GetListIteratorVMs), opts...)
}

// GetStorageContainer mocks base method.
func (m *MockFacadeClientV4) GetStorageContainer(uuid string) (*config.StorageContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageContainer", uuid)
	ret0, _ := ret[0].(*config.StorageContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageContainer indicates an expected call of GetStorageContainer.
func (mr *MockFacadeClientV4MockRecorder) GetStorageContainer(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageContainer", reflect.TypeOf((*MockFacadeClientV4)(nil).GetStorageContainer), uuid)
}

// GetSubnet mocks base method.
func (m *MockFacadeClientV4) GetSubnet(uuid string) (*config0.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubnet", uuid)
	ret0, _ := ret[0].(*config0.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubnet indicates an expected call of GetSubnet.
func (mr *MockFacadeClientV4MockRecorder) GetSubnet(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubnet", reflect.TypeOf((*MockFacadeClientV4)(nil).GetSubnet), uuid)
}

// GetVM mocks base method.
func (m *MockFacadeClientV4) GetVM(uuid string) (*config2.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVM", uuid)
	ret0, _ := ret[0].(*config2.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVM indicates an expected call of GetVM.
func (mr *MockFacadeClientV4MockRecorder) GetVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVM", reflect.TypeOf((*MockFacadeClientV4)(nil).GetVM), uuid)
}

// ListAllAntiAffinityPolicies mocks base method.
func (m *MockFacadeClientV4) ListAllAntiAffinityPolicies(filterParam, orderbyParam *string) ([]policies.VmAntiAffinityPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllAntiAffinityPolicies", filterParam, orderbyParam)
	ret0, _ := ret[0].([]policies.VmAntiAffinityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllAntiAffinityPolicies indicates an expected call of ListAllAntiAffinityPolicies.
func (mr *MockFacadeClientV4MockRecorder) ListAllAntiAffinityPolicies(filterParam, orderbyParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllAntiAffinityPolicies", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllAntiAffinityPolicies), filterParam, orderbyParam)
}

// ListAllCategories mocks base method.
func (m *MockFacadeClientV4) ListAllCategories(filterParam, orderbyParam, expandParam, selectParam *string) ([]config1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllCategories", filterParam, orderbyParam, expandParam, selectParam)
	ret0, _ := ret[0].([]config1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllCategories indicates an expected call of ListAllCategories.
func (mr *MockFacadeClientV4MockRecorder) ListAllCategories(filterParam, orderbyParam, expandParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllCategories", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllCategories), filterParam, orderbyParam, expandParam, selectParam)
}

// ListAllClusters mocks base method.
func (m *MockFacadeClientV4) ListAllClusters(filterParam, orderbyParam, expandParam, selectParam *string) ([]config.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllClusters", filterParam, orderbyParam, expandParam, selectParam)
	ret0, _ := ret[0].([]config.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllClusters indicates an expected call of ListAllClusters.
func (mr *MockFacadeClientV4MockRecorder) ListAllClusters(filterParam, orderbyParam, expandParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllClusters", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllClusters), filterParam, orderbyParam, expandParam, selectParam)
}

// ListAllImages mocks base method.
func (m *MockFacadeClientV4) ListAllImages(filterParam, orderbyParam, selectParam *string) ([]content.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllImages", filterParam, orderbyParam, selectParam)
	ret0, _ := ret[0].([]content.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllImages indicates an expected call of ListAllImages.
func (mr *MockFacadeClientV4MockRecorder) ListAllImages(filterParam, orderbyParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllImages", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllImages), filterParam, orderbyParam, selectParam)
}

// ListAllStorageContainers mocks base method.
func (m *MockFacadeClientV4) ListAllStorageContainers(filterParam, orderbyParam, selectParam *string) ([]config.StorageContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllStorageContainers", filterParam, orderbyParam, selectParam)
	ret0, _ := ret[0].([]config.StorageContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllStorageContainers indicates an expected call of ListAllStorageContainers.
func (mr *MockFacadeClientV4MockRecorder) ListAllStorageContainers(filterParam, orderbyParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllStorageContainers", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllStorageContainers), filterParam, orderbyParam, selectParam)
}

// ListAllSubnets mocks base method.
func (m *MockFacadeClientV4) ListAllSubnets(filterParam, orderbyParam, expandParam, selectParam *string) ([]config0.Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllSubnets", filterParam, orderbyParam, expandParam, selectParam)
	ret0, _ := ret[0].([]config0.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllSubnets indicates an expected call of ListAllSubnets.
func (mr *MockFacadeClientV4MockRecorder) ListAllSubnets(filterParam, orderbyParam, expandParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllSubnets", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllSubnets), filterParam, orderbyParam, expandParam, selectParam)
}

// ListAllVMs mocks base method.
func (m *MockFacadeClientV4) ListAllVMs(filterParam, orderbyParam, selectParam *string) ([]config2.Vm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllVMs", filterParam, orderbyParam, selectParam)
	ret0, _ := ret[0].([]config2.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllVMs indicates an expected call of ListAllVMs.
func (mr *MockFacadeClientV4MockRecorder) ListAllVMs(filterParam, orderbyParam, selectParam any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllVMs", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAllVMs), filterParam, orderbyParam, selectParam)
}

// ListAntiAffinityPolicies mocks base method.
func (m *MockFacadeClientV4) ListAntiAffinityPolicies(opts ...facade.ODataOption) ([]policies.VmAntiAffinityPolicy, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAntiAffinityPolicies", varargs...)
	ret0, _ := ret[0].([]policies.VmAntiAffinityPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAntiAffinityPolicies indicates an expected call of ListAntiAffinityPolicies.
func (mr *MockFacadeClientV4MockRecorder) ListAntiAffinityPolicies(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAntiAffinityPolicies", reflect.TypeOf((*MockFacadeClientV4)(nil).ListAntiAffinityPolicies), opts...)
}

// ListCategories mocks base method.
func (m *MockFacadeClientV4) ListCategories(opts ...facade.ODataOption) ([]config1.Category, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCategories", varargs...)
	ret0, _ := ret[0].([]config1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockFacadeClientV4MockRecorder) ListCategories(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockFacadeClientV4)(nil).ListCategories), opts...)
}

// ListClusterPhysicalGPUs mocks base method.
func (m *MockFacadeClientV4) ListClusterPhysicalGPUs(clusterUuid string, opts ...facade.ODataOption) ([]config.PhysicalGpuProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{clusterUuid}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterPhysicalGPUs", varargs...)
	ret0, _ := ret[0].([]config.PhysicalGpuProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterPhysicalGPUs indicates an expected call of ListClusterPhysicalGPUs.
func (mr *MockFacadeClientV4MockRecorder) ListClusterPhysicalGPUs(clusterUuid any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{clusterUuid}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterPhysicalGPUs", reflect.TypeOf((*MockFacadeClientV4)(nil).ListClusterPhysicalGPUs), varargs...)
}

// ListClusterVirtualGPUs mocks base method.
func (m *MockFacadeClientV4) ListClusterVirtualGPUs(clusterUuid string, opts ...facade.ODataOption) ([]config.VirtualGpuProfile, error) {
	m.ctrl.T.Helper()
	varargs := []any{clusterUuid}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusterVirtualGPUs", varargs...)
	ret0, _ := ret[0].([]config.VirtualGpuProfile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusterVirtualGPUs indicates an expected call of ListClusterVirtualGPUs.
func (mr *MockFacadeClientV4MockRecorder) ListClusterVirtualGPUs(clusterUuid any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{clusterUuid}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusterVirtualGPUs", reflect.TypeOf((*MockFacadeClientV4)(nil).ListClusterVirtualGPUs), varargs...)
}

// ListClusters mocks base method.
func (m *MockFacadeClientV4) ListClusters(opts ...facade.ODataOption) ([]config.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListClusters", varargs...)
	ret0, _ := ret[0].([]config.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListClusters indicates an expected call of ListClusters.
func (mr *MockFacadeClientV4MockRecorder) ListClusters(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListClusters", reflect.TypeOf((*MockFacadeClientV4)(nil).ListClusters), opts...)
}

// ListImages mocks base method.
func (m *MockFacadeClientV4) ListImages(opts ...facade.ODataOption) ([]content.Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListImages", varargs...)
	ret0, _ := ret[0].([]content.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages.
func (mr *MockFacadeClientV4MockRecorder) ListImages(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockFacadeClientV4)(nil).ListImages), opts...)
}

// ListStorageContainers mocks base method.
func (m *MockFacadeClientV4) ListStorageContainers(opts ...facade.ODataOption) ([]config.StorageContainer, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListStorageContainers", varargs...)
	ret0, _ := ret[0].([]config.StorageContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStorageContainers indicates an expected call of ListStorageContainers.
func (mr *MockFacadeClientV4MockRecorder) ListStorageContainers(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStorageContainers", reflect.TypeOf((*MockFacadeClientV4)(nil).ListStorageContainers), opts...)
}

// ListSubnets mocks base method.
func (m *MockFacadeClientV4) ListSubnets(opts ...facade.ODataOption) ([]config0.Subnet, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListSubnets", varargs...)
	ret0, _ := ret[0].([]config0.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets.
func (mr *MockFacadeClientV4MockRecorder) ListSubnets(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockFacadeClientV4)(nil).ListSubnets), opts...)
}

// ListVMs mocks base method.
func (m *MockFacadeClientV4) ListVMs(opts ...facade.ODataOption) ([]config2.Vm, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListVMs", varargs...)
	ret0, _ := ret[0].([]config2.Vm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVMs indicates an expected call of ListVMs.
func (mr *MockFacadeClientV4MockRecorder) ListVMs(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVMs", reflect.TypeOf((*MockFacadeClientV4)(nil).ListVMs), opts...)
}

// PowerOffVM mocks base method.
func (m *MockFacadeClientV4) PowerOffVM(uuid string) (facade.TaskWaiter[config2.Vm], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffVM", uuid)
	ret0, _ := ret[0].(facade.TaskWaiter[config2.Vm])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOffVM indicates an expected call of PowerOffVM.
func (mr *MockFacadeClientV4MockRecorder) PowerOffVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVM", reflect.TypeOf((*MockFacadeClientV4)(nil).PowerOffVM), uuid)
}

// PowerOnVM mocks base method.
func (m *MockFacadeClientV4) PowerOnVM(uuid string) (facade.TaskWaiter[config2.Vm], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnVM", uuid)
	ret0, _ := ret[0].(facade.TaskWaiter[config2.Vm])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnVM indicates an expected call of PowerOnVM.
func (mr *MockFacadeClientV4MockRecorder) PowerOnVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVM", reflect.TypeOf((*MockFacadeClientV4)(nil).PowerOnVM), uuid)
}

// UpdateAntiAffinityPolicy mocks base method.
func (m *MockFacadeClientV4) UpdateAntiAffinityPolicy(uuid string, policy policies.VmAntiAffinityPolicy) (facade.TaskWaiter[policies.VmAntiAffinityPolicy], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAntiAffinityPolicy", uuid, policy)
	ret0, _ := ret[0].(facade.TaskWaiter[policies.VmAntiAffinityPolicy])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAntiAffinityPolicy indicates an expected call of UpdateAntiAffinityPolicy.
func (mr *MockFacadeClientV4MockRecorder) UpdateAntiAffinityPolicy(uuid, policy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAntiAffinityPolicy", reflect.TypeOf((*MockFacadeClientV4)(nil).UpdateAntiAffinityPolicy), uuid, policy)
}

// UpdateCategory mocks base method.
func (m *MockFacadeClientV4) UpdateCategory(uuid string, category *config1.Category) (*config1.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", uuid, category)
	ret0, _ := ret[0].(*config1.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockFacadeClientV4MockRecorder) UpdateCategory(uuid, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockFacadeClientV4)(nil).UpdateCategory), uuid, category)
}

// UpdateVM mocks base method.
func (m *MockFacadeClientV4) UpdateVM(uuid string, vm *config2.Vm) (facade.TaskWaiter[config2.Vm], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVM", uuid, vm)
	ret0, _ := ret[0].(facade.TaskWaiter[config2.Vm])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVM indicates an expected call of UpdateVM.
func (mr *MockFacadeClientV4MockRecorder) UpdateVM(uuid, vm any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVM", reflect.TypeOf((*MockFacadeClientV4)(nil).UpdateVM), uuid, vm)
}
