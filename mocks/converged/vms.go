// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: VMs)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/vms.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged VMs
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockVMs is a mock of VMs interface.
type MockVMs[VM any] struct {
	ctrl     *gomock.Controller
	recorder *MockVMsMockRecorder[VM]
	isgomock struct{}
}

// MockVMsMockRecorder is the mock recorder for MockVMs.
type MockVMsMockRecorder[VM any] struct {
	mock *MockVMs[VM]
}

// NewMockVMs creates a new mock instance.
func NewMockVMs[VM any](ctrl *gomock.Controller) *MockVMs[VM] {
	mock := &MockVMs[VM]{ctrl: ctrl}
	mock.recorder = &MockVMsMockRecorder[VM]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVMs[VM]) EXPECT() *MockVMsMockRecorder[VM] {
	return m.recorder
}

// Create mocks base method.
func (m *MockVMs[VM]) Create(ctx context.Context, entity *VM) (*VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(*VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVMsMockRecorder[VM]) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVMs[VM])(nil).Create), ctx, entity)
}

// CreateAsync mocks base method.
func (m *MockVMs[VM]) CreateAsync(ctx context.Context, entity *VM) (converged.Operation[VM], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAsync", ctx, entity)
	ret0, _ := ret[0].(converged.Operation[VM])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAsync indicates an expected call of CreateAsync.
func (mr *MockVMsMockRecorder[VM]) CreateAsync(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAsync", reflect.TypeOf((*MockVMs[VM])(nil).CreateAsync), ctx, entity)
}

// Delete mocks base method.
func (m *MockVMs[VM]) Delete(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockVMsMockRecorder[VM]) Delete(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVMs[VM])(nil).Delete), ctx, uuid)
}

// DeleteAsync mocks base method.
func (m *MockVMs[VM]) DeleteAsync(ctx context.Context, uuid string) (converged.Operation[converged.NoEntity], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAsync", ctx, uuid)
	ret0, _ := ret[0].(converged.Operation[converged.NoEntity])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAsync indicates an expected call of DeleteAsync.
func (mr *MockVMsMockRecorder[VM]) DeleteAsync(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAsync", reflect.TypeOf((*MockVMs[VM])(nil).DeleteAsync), ctx, uuid)
}

// Get mocks base method.
func (m *MockVMs[VM]) Get(ctx context.Context, uuid string) (*VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVMsMockRecorder[VM]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVMs[VM])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockVMs[VM]) List(ctx context.Context, opts ...converged.ODataOption) ([]VM, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVMsMockRecorder[VM]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVMs[VM])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockVMs[VM]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[VM] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[VM])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockVMsMockRecorder[VM]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockVMs[VM])(nil).NewIterator), varargs...)
}

// PowerOffVM mocks base method.
func (m *MockVMs[VM]) PowerOffVM(uuid string) (converged.Operation[VM], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOffVM", uuid)
	ret0, _ := ret[0].(converged.Operation[VM])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOffVM indicates an expected call of PowerOffVM.
func (mr *MockVMsMockRecorder[VM]) PowerOffVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOffVM", reflect.TypeOf((*MockVMs[VM])(nil).PowerOffVM), uuid)
}

// PowerOnVM mocks base method.
func (m *MockVMs[VM]) PowerOnVM(uuid string) (converged.Operation[VM], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOnVM", uuid)
	ret0, _ := ret[0].(converged.Operation[VM])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOnVM indicates an expected call of PowerOnVM.
func (mr *MockVMsMockRecorder[VM]) PowerOnVM(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOnVM", reflect.TypeOf((*MockVMs[VM])(nil).PowerOnVM), uuid)
}

// Update mocks base method.
func (m *MockVMs[VM]) Update(ctx context.Context, uuid string, entity *VM) (*VM, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, uuid, entity)
	ret0, _ := ret[0].(*VM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockVMsMockRecorder[VM]) Update(ctx, uuid, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockVMs[VM])(nil).Update), ctx, uuid, entity)
}

// UpdateAsync mocks base method.
func (m *MockVMs[VM]) UpdateAsync(ctx context.Context, uuid string, entity *VM) (converged.Operation[VM], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAsync", ctx, uuid, entity)
	ret0, _ := ret[0].(converged.Operation[VM])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAsync indicates an expected call of UpdateAsync.
func (mr *MockVMsMockRecorder[VM]) UpdateAsync(ctx, uuid, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAsync", reflect.TypeOf((*MockVMs[VM])(nil).UpdateAsync), ctx, uuid, entity)
}
