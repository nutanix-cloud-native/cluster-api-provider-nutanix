// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: Categories)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/categories.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged Categories
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockCategories is a mock of Categories interface.
type MockCategories[Category any] struct {
	ctrl     *gomock.Controller
	recorder *MockCategoriesMockRecorder[Category]
	isgomock struct{}
}

// MockCategoriesMockRecorder is the mock recorder for MockCategories.
type MockCategoriesMockRecorder[Category any] struct {
	mock *MockCategories[Category]
}

// NewMockCategories creates a new mock instance.
func NewMockCategories[Category any](ctrl *gomock.Controller) *MockCategories[Category] {
	mock := &MockCategories[Category]{ctrl: ctrl}
	mock.recorder = &MockCategoriesMockRecorder[Category]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategories[Category]) EXPECT() *MockCategoriesMockRecorder[Category] {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategories[Category]) Create(ctx context.Context, entity *Category) (*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, entity)
	ret0, _ := ret[0].(*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoriesMockRecorder[Category]) Create(ctx, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategories[Category])(nil).Create), ctx, entity)
}

// Delete mocks base method.
func (m *MockCategories[Category]) Delete(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoriesMockRecorder[Category]) Delete(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategories[Category])(nil).Delete), ctx, uuid)
}

// Get mocks base method.
func (m *MockCategories[Category]) Get(ctx context.Context, uuid string) (*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoriesMockRecorder[Category]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategories[Category])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockCategories[Category]) List(ctx context.Context, opts ...converged.ODataOption) ([]Category, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoriesMockRecorder[Category]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategories[Category])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockCategories[Category]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[Category] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[Category])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockCategoriesMockRecorder[Category]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockCategories[Category])(nil).NewIterator), varargs...)
}

// Update mocks base method.
func (m *MockCategories[Category]) Update(ctx context.Context, uuid string, entity *Category) (*Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, uuid, entity)
	ret0, _ := ret[0].(*Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoriesMockRecorder[Category]) Update(ctx, uuid, entity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategories[Category])(nil).Update), ctx, uuid, entity)
}
