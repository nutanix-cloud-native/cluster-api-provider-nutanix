// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: Subnets)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/subnets.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged Subnets
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockSubnets is a mock of Subnets interface.
type MockSubnets[Subnet any] struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetsMockRecorder[Subnet]
	isgomock struct{}
}

// MockSubnetsMockRecorder is the mock recorder for MockSubnets.
type MockSubnetsMockRecorder[Subnet any] struct {
	mock *MockSubnets[Subnet]
}

// NewMockSubnets creates a new mock instance.
func NewMockSubnets[Subnet any](ctrl *gomock.Controller) *MockSubnets[Subnet] {
	mock := &MockSubnets[Subnet]{ctrl: ctrl}
	mock.recorder = &MockSubnetsMockRecorder[Subnet]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnets[Subnet]) EXPECT() *MockSubnetsMockRecorder[Subnet] {
	return m.recorder
}

// Get mocks base method.
func (m *MockSubnets[Subnet]) Get(ctx context.Context, uuid string) (*Subnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubnetsMockRecorder[Subnet]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnets[Subnet])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockSubnets[Subnet]) List(ctx context.Context, opts ...converged.ODataOption) ([]Subnet, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubnetsMockRecorder[Subnet]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubnets[Subnet])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockSubnets[Subnet]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[Subnet] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[Subnet])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockSubnetsMockRecorder[Subnet]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockSubnets[Subnet])(nil).NewIterator), varargs...)
}
