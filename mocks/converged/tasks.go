// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: Tasks)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/tasks.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged Tasks
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockTasks is a mock of Tasks interface.
type MockTasks[Task any, AppMessage any] struct {
	ctrl     *gomock.Controller
	recorder *MockTasksMockRecorder[Task, AppMessage]
	isgomock struct{}
}

// MockTasksMockRecorder is the mock recorder for MockTasks.
type MockTasksMockRecorder[Task any, AppMessage any] struct {
	mock *MockTasks[Task, AppMessage]
}

// NewMockTasks creates a new mock instance.
func NewMockTasks[Task any, AppMessage any](ctrl *gomock.Controller) *MockTasks[Task, AppMessage] {
	mock := &MockTasks[Task, AppMessage]{ctrl: ctrl}
	mock.recorder = &MockTasksMockRecorder[Task, AppMessage]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTasks[Task, AppMessage]) EXPECT() *MockTasksMockRecorder[Task, AppMessage] {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTasks[Task, AppMessage]) Cancel(ctx context.Context, uuid string) (*AppMessage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, uuid)
	ret0, _ := ret[0].(*AppMessage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTasksMockRecorder[Task, AppMessage]) Cancel(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTasks[Task, AppMessage])(nil).Cancel), ctx, uuid)
}

// Get mocks base method.
func (m *MockTasks[Task, AppMessage]) Get(ctx context.Context, uuid string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTasksMockRecorder[Task, AppMessage]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTasks[Task, AppMessage])(nil).Get), ctx, uuid)
}

// GetWithSelect mocks base method.
func (m *MockTasks[Task, AppMessage]) GetWithSelect(ctx context.Context, uuid string, fields []string) (*Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithSelect", ctx, uuid, fields)
	ret0, _ := ret[0].(*Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithSelect indicates an expected call of GetWithSelect.
func (mr *MockTasksMockRecorder[Task, AppMessage]) GetWithSelect(ctx, uuid, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithSelect", reflect.TypeOf((*MockTasks[Task, AppMessage])(nil).GetWithSelect), ctx, uuid, fields)
}

// List mocks base method.
func (m *MockTasks[Task, AppMessage]) List(ctx context.Context, opts ...converged.ODataOption) ([]Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTasksMockRecorder[Task, AppMessage]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTasks[Task, AppMessage])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockTasks[Task, AppMessage]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[Task] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[Task])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockTasksMockRecorder[Task, AppMessage]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockTasks[Task, AppMessage])(nil).NewIterator), varargs...)
}
