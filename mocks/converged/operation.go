// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: Operation)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/operation.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged Operation
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation[T any] struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder[T]
	isgomock struct{}
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder[T any] struct {
	mock *MockOperation[T]
}

// NewMockOperation creates a new mock instance.
func NewMockOperation[T any](ctrl *gomock.Controller) *MockOperation[T] {
	mock := &MockOperation[T]{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation[T]) EXPECT() *MockOperationMockRecorder[T] {
	return m.recorder
}

// Errors mocks base method.
func (m *MockOperation[T]) Errors() []error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].([]error)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockOperationMockRecorder[T]) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockOperation[T])(nil).Errors))
}

// GetAffectedEntityRefs mocks base method.
func (m *MockOperation[T]) GetAffectedEntityRefs() ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAffectedEntityRefs")
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAffectedEntityRefs indicates an expected call of GetAffectedEntityRefs.
func (mr *MockOperationMockRecorder[T]) GetAffectedEntityRefs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAffectedEntityRefs", reflect.TypeOf((*MockOperation[T])(nil).GetAffectedEntityRefs))
}

// IsDone mocks base method.
func (m *MockOperation[T]) IsDone() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDone")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDone indicates an expected call of IsDone.
func (mr *MockOperationMockRecorder[T]) IsDone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDone", reflect.TypeOf((*MockOperation[T])(nil).IsDone))
}

// IsFailed mocks base method.
func (m *MockOperation[T]) IsFailed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsFailed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsFailed indicates an expected call of IsFailed.
func (mr *MockOperationMockRecorder[T]) IsFailed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsFailed", reflect.TypeOf((*MockOperation[T])(nil).IsFailed))
}

// IsSuccess mocks base method.
func (m *MockOperation[T]) IsSuccess() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSuccess")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSuccess indicates an expected call of IsSuccess.
func (mr *MockOperationMockRecorder[T]) IsSuccess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSuccess", reflect.TypeOf((*MockOperation[T])(nil).IsSuccess))
}

// Results mocks base method.
func (m *MockOperation[T]) Results() ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Results")
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Results indicates an expected call of Results.
func (mr *MockOperationMockRecorder[T]) Results() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Results", reflect.TypeOf((*MockOperation[T])(nil).Results))
}

// Status mocks base method.
func (m *MockOperation[T]) Status() converged.TaskStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(converged.TaskStatus)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockOperationMockRecorder[T]) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOperation[T])(nil).Status))
}

// UUID mocks base method.
func (m *MockOperation[T]) UUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UUID indicates an expected call of UUID.
func (mr *MockOperationMockRecorder[T]) UUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UUID", reflect.TypeOf((*MockOperation[T])(nil).UUID))
}

// Wait mocks base method.
func (m *MockOperation[T]) Wait(ctx context.Context) ([]*T, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].([]*T)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockOperationMockRecorder[T]) Wait(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation[T])(nil).Wait), ctx)
}
