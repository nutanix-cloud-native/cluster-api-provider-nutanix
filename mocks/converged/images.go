// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: Images)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/images.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged Images
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockImages is a mock of Images interface.
type MockImages[Image any] struct {
	ctrl     *gomock.Controller
	recorder *MockImagesMockRecorder[Image]
	isgomock struct{}
}

// MockImagesMockRecorder is the mock recorder for MockImages.
type MockImagesMockRecorder[Image any] struct {
	mock *MockImages[Image]
}

// NewMockImages creates a new mock instance.
func NewMockImages[Image any](ctrl *gomock.Controller) *MockImages[Image] {
	mock := &MockImages[Image]{ctrl: ctrl}
	mock.recorder = &MockImagesMockRecorder[Image]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImages[Image]) EXPECT() *MockImagesMockRecorder[Image] {
	return m.recorder
}

// Get mocks base method.
func (m *MockImages[Image]) Get(ctx context.Context, uuid string) (*Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockImagesMockRecorder[Image]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockImages[Image])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockImages[Image]) List(ctx context.Context, opts ...converged.ODataOption) ([]Image, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockImagesMockRecorder[Image]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockImages[Image])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockImages[Image]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[Image] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[Image])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockImagesMockRecorder[Image]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockImages[Image])(nil).NewIterator), varargs...)
}
