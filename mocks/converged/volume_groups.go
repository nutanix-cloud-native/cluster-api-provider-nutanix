// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nutanix-cloud-native/prism-go-client/converged (interfaces: VolumeGroups)
//
// Generated by this command:
//
//	mockgen -destination=mocks/converged/volume_groups.go -package=mockconverged github.com/nutanix-cloud-native/prism-go-client/converged VolumeGroups
//

// Package mockconverged is a generated GoMock package.
package mockconverged

import (
	context "context"
	reflect "reflect"

	converged "github.com/nutanix-cloud-native/prism-go-client/converged"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeGroups is a mock of VolumeGroups interface.
type MockVolumeGroups[VolumeGroup any, VmAttachment any] struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]
	isgomock struct{}
}

// MockVolumeGroupsMockRecorder is the mock recorder for MockVolumeGroups.
type MockVolumeGroupsMockRecorder[VolumeGroup any, VmAttachment any] struct {
	mock *MockVolumeGroups[VolumeGroup, VmAttachment]
}

// NewMockVolumeGroups creates a new mock instance.
func NewMockVolumeGroups[VolumeGroup any, VmAttachment any](ctrl *gomock.Controller) *MockVolumeGroups[VolumeGroup, VmAttachment] {
	mock := &MockVolumeGroups[VolumeGroup, VmAttachment]{ctrl: ctrl}
	mock.recorder = &MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) EXPECT() *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment] {
	return m.recorder
}

// AttachToVM mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) AttachToVM(ctx context.Context, volumeGroupUUID string, vmAttachment VmAttachment) (*VolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToVM", ctx, volumeGroupUUID, vmAttachment)
	ret0, _ := ret[0].(*VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToVM indicates an expected call of AttachToVM.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) AttachToVM(ctx, volumeGroupUUID, vmAttachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToVM", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).AttachToVM), ctx, volumeGroupUUID, vmAttachment)
}

// AttachToVMAsync mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) AttachToVMAsync(ctx context.Context, volumeGroupUUID string, vmAttachment VmAttachment) (converged.Operation[VolumeGroup], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachToVMAsync", ctx, volumeGroupUUID, vmAttachment)
	ret0, _ := ret[0].(converged.Operation[VolumeGroup])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachToVMAsync indicates an expected call of AttachToVMAsync.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) AttachToVMAsync(ctx, volumeGroupUUID, vmAttachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachToVMAsync", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).AttachToVMAsync), ctx, volumeGroupUUID, vmAttachment)
}

// DetachFromVM mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) DetachFromVM(ctx context.Context, volumeGroupUUID string, vmAttachment VmAttachment) (*VolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFromVM", ctx, volumeGroupUUID, vmAttachment)
	ret0, _ := ret[0].(*VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachFromVM indicates an expected call of DetachFromVM.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) DetachFromVM(ctx, volumeGroupUUID, vmAttachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFromVM", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).DetachFromVM), ctx, volumeGroupUUID, vmAttachment)
}

// DetachFromVMAsync mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) DetachFromVMAsync(ctx context.Context, volumeGroupUUID string, vmAttachment VmAttachment) (converged.Operation[VolumeGroup], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachFromVMAsync", ctx, volumeGroupUUID, vmAttachment)
	ret0, _ := ret[0].(converged.Operation[VolumeGroup])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachFromVMAsync indicates an expected call of DetachFromVMAsync.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) DetachFromVMAsync(ctx, volumeGroupUUID, vmAttachment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachFromVMAsync", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).DetachFromVMAsync), ctx, volumeGroupUUID, vmAttachment)
}

// Get mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) Get(ctx context.Context, uuid string) (*VolumeGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, uuid)
	ret0, _ := ret[0].(*VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) Get(ctx, uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).Get), ctx, uuid)
}

// List mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) List(ctx context.Context, opts ...converged.ODataOption) ([]VolumeGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]VolumeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) List(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).List), varargs...)
}

// NewIterator mocks base method.
func (m *MockVolumeGroups[VolumeGroup, VmAttachment]) NewIterator(ctx context.Context, opts ...converged.ODataOption) converged.Iterator[VolumeGroup] {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewIterator", varargs...)
	ret0, _ := ret[0].(converged.Iterator[VolumeGroup])
	return ret0
}

// NewIterator indicates an expected call of NewIterator.
func (mr *MockVolumeGroupsMockRecorder[VolumeGroup, VmAttachment]) NewIterator(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewIterator", reflect.TypeOf((*MockVolumeGroups[VolumeGroup, VmAttachment])(nil).NewIterator), varargs...)
}
