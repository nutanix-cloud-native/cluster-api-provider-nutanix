// Code generated by MockGen. DO NOT EDIT.
// Source: k8s.io/apimachinery/pkg/api/meta (interfaces: RESTMapper,RESTScope)
//
// Generated by this command:
//
//	mockgen -destination=mocks/k8sapimachinery/interfaces.go -package=mockmeta k8s.io/apimachinery/pkg/api/meta RESTMapper,RESTScope
//

// Package mockmeta is a generated GoMock package.
package mockmeta

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	meta "k8s.io/apimachinery/pkg/api/meta"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockRESTMapper is a mock of RESTMapper interface.
type MockRESTMapper struct {
	ctrl     *gomock.Controller
	recorder *MockRESTMapperMockRecorder
	isgomock struct{}
}

// MockRESTMapperMockRecorder is the mock recorder for MockRESTMapper.
type MockRESTMapperMockRecorder struct {
	mock *MockRESTMapper
}

// NewMockRESTMapper creates a new mock instance.
func NewMockRESTMapper(ctrl *gomock.Controller) *MockRESTMapper {
	mock := &MockRESTMapper{ctrl: ctrl}
	mock.recorder = &MockRESTMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTMapper) EXPECT() *MockRESTMapperMockRecorder {
	return m.recorder
}

// KindFor mocks base method.
func (m *MockRESTMapper) KindFor(resource schema.GroupVersionResource) (schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindFor", resource)
	ret0, _ := ret[0].(schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindFor indicates an expected call of KindFor.
func (mr *MockRESTMapperMockRecorder) KindFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindFor", reflect.TypeOf((*MockRESTMapper)(nil).KindFor), resource)
}

// KindsFor mocks base method.
func (m *MockRESTMapper) KindsFor(resource schema.GroupVersionResource) ([]schema.GroupVersionKind, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KindsFor", resource)
	ret0, _ := ret[0].([]schema.GroupVersionKind)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// KindsFor indicates an expected call of KindsFor.
func (mr *MockRESTMapperMockRecorder) KindsFor(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KindsFor", reflect.TypeOf((*MockRESTMapper)(nil).KindsFor), resource)
}

// RESTMapping mocks base method.
func (m *MockRESTMapper) RESTMapping(gk schema.GroupKind, versions ...string) (*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMapping", varargs...)
	ret0, _ := ret[0].(*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMapping indicates an expected call of RESTMapping.
func (mr *MockRESTMapperMockRecorder) RESTMapping(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMapping", reflect.TypeOf((*MockRESTMapper)(nil).RESTMapping), varargs...)
}

// RESTMappings mocks base method.
func (m *MockRESTMapper) RESTMappings(gk schema.GroupKind, versions ...string) ([]*meta.RESTMapping, error) {
	m.ctrl.T.Helper()
	varargs := []any{gk}
	for _, a := range versions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RESTMappings", varargs...)
	ret0, _ := ret[0].([]*meta.RESTMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RESTMappings indicates an expected call of RESTMappings.
func (mr *MockRESTMapperMockRecorder) RESTMappings(gk any, versions ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{gk}, versions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RESTMappings", reflect.TypeOf((*MockRESTMapper)(nil).RESTMappings), varargs...)
}

// ResourceFor mocks base method.
func (m *MockRESTMapper) ResourceFor(input schema.GroupVersionResource) (schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceFor", input)
	ret0, _ := ret[0].(schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceFor indicates an expected call of ResourceFor.
func (mr *MockRESTMapperMockRecorder) ResourceFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceFor", reflect.TypeOf((*MockRESTMapper)(nil).ResourceFor), input)
}

// ResourceSingularizer mocks base method.
func (m *MockRESTMapper) ResourceSingularizer(resource string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceSingularizer", resource)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourceSingularizer indicates an expected call of ResourceSingularizer.
func (mr *MockRESTMapperMockRecorder) ResourceSingularizer(resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceSingularizer", reflect.TypeOf((*MockRESTMapper)(nil).ResourceSingularizer), resource)
}

// ResourcesFor mocks base method.
func (m *MockRESTMapper) ResourcesFor(input schema.GroupVersionResource) ([]schema.GroupVersionResource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourcesFor", input)
	ret0, _ := ret[0].([]schema.GroupVersionResource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResourcesFor indicates an expected call of ResourcesFor.
func (mr *MockRESTMapperMockRecorder) ResourcesFor(input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourcesFor", reflect.TypeOf((*MockRESTMapper)(nil).ResourcesFor), input)
}

// MockRESTScope is a mock of RESTScope interface.
type MockRESTScope struct {
	ctrl     *gomock.Controller
	recorder *MockRESTScopeMockRecorder
	isgomock struct{}
}

// MockRESTScopeMockRecorder is the mock recorder for MockRESTScope.
type MockRESTScopeMockRecorder struct {
	mock *MockRESTScope
}

// NewMockRESTScope creates a new mock instance.
func NewMockRESTScope(ctrl *gomock.Controller) *MockRESTScope {
	mock := &MockRESTScope{ctrl: ctrl}
	mock.recorder = &MockRESTScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTScope) EXPECT() *MockRESTScopeMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockRESTScope) Name() meta.RESTScopeName {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(meta.RESTScopeName)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockRESTScopeMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRESTScope)(nil).Name))
}
