version: 2.0
jobs:
    build:
        docker:
            - image: cimg/python:3.8.5
        resource_class: small
        environment:
            CANAVERAL_DEPS: jq
            CANAVERAL_BUILD_SYSTEM: noop
            CANAVERAL_PACKAGE_TOOLS: docker
            DOCKER_REPO_SERVER: artifactory.dyn.ntnxdpro.com/canaveral-legacy-docker
            CANAVERAL_LANGUAGE_VERSION: 3.8.5

            CANAVERAL_USE_LEGACY_PIPELINE_MODE: "0"
            CANAVERAL_USE_BLUEPRINT_PROXY: "1"

        steps:
            - run:
                  name: Interpolated Environment Variables
                  command: |-
                      echo "export DOCKER_REPO_NAME=${CIRCLE_PROJECT_USERNAME}" >> $BASH_ENV
                      echo "export IMAGE_NAME=${DOCKER_REPO_SERVER}/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}" >> $BASH_ENV
            - run:
                  name: Install Dependencies
                  command: |-
                      sudo apt-get update
                      sudo apt-get install -y --no-install-recommends ${CANAVERAL_DEPS}
            - checkout
            - setup_remote_docker:
                  docker_layer_caching: false
            - run:
                  name: Bootstrap Canaveral Certs
                  command: |-
                      declare -x CANAVERAL_CERT_DOWNLOAD_URL="${CANAVERAL_CERT_DOWNLOAD_URL:-http://canaveral-engine-api.canaveral-corp.us-west-2.aws/ca}"
                      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/root-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-root-ca.crt"
                      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/intermediate-ca.crt" -O "/usr/local/share/ca-certificates/canaveral-intermediate-ca.crt"
                      # A bug in OpenSSL can cause trouble with certificate verification (for example, when downloading
                      # golang packages)  Uncomment the next line as a workaround.
                      # sudo rm /usr/share/ca-certificates/mozilla/DST_Root_CA_X3.crt
                      sudo /usr/sbin/update-ca-certificates
                      sudo wget -t 5 -v "${CANAVERAL_CERT_DOWNLOAD_URL}/ca-chain.crt" -O "/tmp/ca-chain.crt"
                      cat "/tmp/ca-chain.crt" >> $(python -m certifi)
            - run:
                  name: Install canaveral-build-tools
                  command: |-
                      BUILD_TOOLS_VERSION=$(curl -s -L https://canaveral-gatekeeper.canaveral-corp.us-west-2.aws/build_config/build_tools_version | jq -r '.result')
                      echo "Using build tools version '${BUILD_TOOLS_VERSION}'"
                      pyenv virtualenv canaveral_build
                      PYENV_VERSION=canaveral_build pip install --upgrade pip
                      PYENV_VERSION=canaveral_build pip install --extra-index-url "https://${CANAVERAL_ARTIFACTORY_READ_USER}:${CANAVERAL_ARTIFACTORY_READ_PASSWORD}@artifactory.dyn.ntnxdpro.com/artifactory/api/pypi/canaveral-legacy-pypi/simple" --trusted-host artifactory.dyn.ntnxdpro.com nutanix-release-engineering-canaveral-build-tools=="${BUILD_TOOLS_VERSION}"
            - run:
                  name: Finalize Canaveral Cert Install
                  command: |-
                      mkdir -p "/tmp/ssl-certs/tmp"
                      sudo -E $(pyenv which python) -m canaveral_build_tools.core.setup_ca_chain
                      sudo chown -R circleci:circleci /tmp/canaveral_logs
                  environment:
                      PYENV_VERSION: canaveral_build
            - run:
                  name: canaveral/core/scripts/create-workspace.sh
                  command: |-
                      CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=$(head /dev/urandom | env LC_CTYPE=C tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
                      echo "export CANAVERAL_TOKEN_VENDING_MACHINE_NONCE=${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}" >> $BASH_ENV
                      echo "NONCE: ${CANAVERAL_TOKEN_VENDING_MACHINE_NONCE}"
                  environment:
                      PYENV_VERSION: canaveral_build
            - run:
                  name: Setup Build
                  command: |-
                      python -m canaveral_build_tools.core.setup_environment
                      python -m canaveral_build_tools.core.post_checkout
                      python -m canaveral_build_tools.core.dependency_setup
                      python -m canaveral_build_tools.core.setup_database
                  environment:
                      PYENV_VERSION: canaveral_build
            - run:
                  name: Build
                  command: |-
                      python -m canaveral_build_tools.core.push_event Build::Started
                      python -m canaveral_build_tools.core.build
                  environment:
                      PYENV_VERSION: canaveral_build
            - run:
                  name: Unit Tests
                  command: python -m canaveral_build_tools.core.run_tests "unit"
                  environment:
                      PYENV_VERSION: canaveral_build
            - run:
                  name: Package
                  command: python -m canaveral_build_tools.core.package
                  environment:
                      PYENV_VERSION: canaveral_build
            - store_test_results:
                  path: test-results
            - store_artifacts:
                  path: test-results
            - store_artifacts:
                  path: coverage
            - run:
                  name: canaveral deploy
                  command: |-
                      python -m canaveral_build_tools.core.inform_dependencies
                      python -m canaveral_build_tools.core.push_event Build::Finished::Succeeded
                      python -m canaveral_build_tools.core.deploy
                  environment:
                      PYENV_VERSION: canaveral_build
            - store_artifacts:
                  name: Archive build logs
                  path: /tmp/canaveral_logs
